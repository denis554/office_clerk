=render "chart"

:javascript
  var allItems = #{ @items.to_json };
.row.new_report
  .col-md-9
    #placeholder{style: "width: 100%;height: 100%;"}
      %vue-chartist{":data" => "data" , ":options" => "options"}
    #legend
      %button
        Orders {{total_orders}}
      %button
        Items {{total_items}}
      %button
        {{show}} {{total_shown.toFixed(0)}}
  .col-md-3
    .form-group
      %select.form-control{"v-model" => "kind"  }
        %option{ value: "Order"}= t(:order)
        %option{ value: "Purchase"}= t(:purchase)
    .form-group
      .col-md-4
        = t(:supplier)
      .col-md-8
        %select.form-control{"v-model" => "supplier"  }
          %option{ value: ""}
          %option{ "v-for" => "s in suppliers", "v-bind:value": "s['id']" }
            {{ s['supplier_name']}}
    .form-group
      .col-md-4
        = t(:category)
      .col-md-8
        %select.form-control{"v-model" => "category"  }
          %option{ value: ""}
          %option{ "v-for" => "c in categories", "v-bind:value": "c['id']" }
            {{ c['name']}}
    .form-group
      .col-md-12
        %label= t("date_range")
      .col-md-12
        .col-md-3
          %a{ "@click" => "minusYear" }
            =image_tag "minus.png" , width: "25px"
        .col-md-6
          %a{ "@click" => "thisYear" }
            Vuosi
        .col-md-3
          %a{ "@click" => "plusYear" }
            =image_tag "plus.png" , width: "25px"
      .col-md-12
        .col-md-3
          %a{ "@click" => "minusStartMonth" }
            =image_tag "minus.png" , width: "20px"
        .col-md-6
          %span
            {{start.format('DD MM YYYY')}}
        .col-md-3
          %a{ "@click" => "plusStartMonth" }
            =image_tag "plus.png" , width: "20px"
      .col-md-12
        .col-md-3
          %a{ "@click" => "minusEndMonth" }
            =image_tag "minus.png" , width: "20px"
        .col-md-6
          %span
            {{end.format('DD MM YYYY')}}
        .col-md-3
          %a{ "@click" => "plusEndMonth" }
            =image_tag "plus.png" , width: "20px"
    .form-group
      .col-md-4
        = t(:group_by)
      .col-md-8
        %select.form-control{"v-model" => "group_by"  }
          %option{ "v-for" => "(g,v) in group_names", "v-bind:value": "v" }
            {{g}}
    .form-group
      .col-md-6
        %label Hinta
        %input{:type => "radio", "v-model" => "show", :value => "price"}/
      .col-md-6
        %label= t(:quantity)
        %input{:type => "radio", "v-model" => "show", :value => "quantity"}/
    .form-group
      .col-md-6
        %label= t(:month)
        %input{:type => "radio", "v-model" => "interval", :value => "month"}/
      .col-md-6
        %label= t(:week)
        %input{:type => "radio", "v-model" => "interval", :value => "week"}/
    .col-md-12{"v-for" => "(v,g) in groups"}
      %span{":class" => "'ct-series-' + String.fromCharCode(97 + group_indexes.indexOf(g))"}
        %a{"@click" =>"set_group(g)"}
          {{name_for(g)}}
        %span.ct-line
          total
:javascript
  var app = new Vue({
    el: '.new_report',
    data: {
      items: allItems,
      attributes: #{@attributes.to_json} ,
      categories: #{Category.all.to_json( only: [:id , :name])} ,
      suppliers: #{Supplier.all.to_json( only:  [:id , :supplier_name])},
      options: {
        fullWidth: true,
        height: 400,
        chartPadding: {
          right: 40
        }
      },
      start: moment(#{@start.to_time.to_i * 1000}),
      end: moment(#{@end.to_time.to_i * 1000}),
      created_index: #{@attributes.to_json}.indexOf("created_at"),
      group_names: #{@group_names.to_json},
      group_by: "all",
      show: "price",
      kind: "Order",
      supplier: "",
      category: "",
      interval: 'week',
    },
    computed: {
      buckets: function(){
        var start = moment(this.start)
        var all = {}
        while(start < this.end) {
          if( this.interval == "week") {
            buck = start.week()
            label = "Week " + (buck + 1)
            start.add(1,"week")
          }else{
            buck = start.month()
            label = start.format("MMM")
            start.add(1,"month")
          }
          all[buck] = label
        }
        return all
      },
      labels: function(){
        var all = []
        var buckets = this.buckets
        for(key in buckets){
          var val = buckets[key]
          all.push(val)
        }
        return all
      },
      filteredKinds: function(){
        var index = this.attributes.indexOf("baskets.kori_type")
        var that = this.kind
        return this.items.filter(function(item) { return item[index] == that ; })
      },
      filteredSuppliers: function(){
        var that = this.supplier
        var items = this.filteredKinds
        if(that == "" ) return items
        var index = this.attributes.indexOf("products.supplier_id")
        return items.filter(function(item) { return item[index] == that ; })
      },
      filteredCategories: function(){
        var that = this.category
        var items = this.filteredSuppliers
        if(that == "" ) return items
        var index = this.attributes.indexOf("products.category_id")
        return items.filter(function(item) { return item[index] == that ; })
      },
      groups: function() {
        var items = this.filteredCategories
        if(this.group_by == "all") return { all: items}
        var group_by = this.attributes.indexOf(this.group_by)
        var all = {}
        for( var i in items){
          var item = items[i]
          var key = item[group_by]
          var series = all[ key ] || []
          series.push(item)
          all[ key ] = series
        }
        return all
      },
      group_indexes: function(){
        var groups = this.groups
        var indexes = []
        for( key in groups){
          indexes.push(key)
        }
        return indexes
      },
      total_items: function(){
        return this.filteredCategories.length
      },
      total_orders: function(){
        var items = this.filteredCategories
        var basket = this.attributes.indexOf("basket_id")
        var all = {}
        for(var i = 0; i < items.length; i++) {
          all[items[i][basket]] = 1
        }
        return Object.keys(all).length
      },
      total_shown: function(){
        var show  = this.attributes.indexOf( this.show )
        var items = this.filteredCategories
        var total = 0
        for(var i = 0; i < items.length; i++) {
          total += items[i][show]
        }
        return total
      },
      data: function() {
        var groups = this.groups
        var show = this.attributes.indexOf( this.show )
        var series = []
        for(group in groups){
          var items = groups[group]
          var all = this.new_group()
          for(var i = 0; i < items.length; i++) {
            item = items[i]
            var bucket = this.bucket(item)
            all[bucket] = all[bucket] + item[show]
          }
          var vals = []
          for( var key in all){
            vals.push(all[key])
          }
          series.push(vals)
        }
        return {
          labels: this.labels,
          series: series
        }
      }
    },
    methods: {
      bucket: function(item){
        if( this.interval == "week") return moment(item[this.created_index]).week()
        return moment(item[this.created_index]).month()
      },
      hash_find: function( hash , dat , property){
        var index = parseInt(dat)
        for(key in hash){
          if( hash[key]["id"] == index) return hash[key][property]
        }
        console.log("Not found " + dat + " for " + property)
        return "undefined"
      },
      new_group: function(){
        var group = {}
        for( bucket in this.buckets){
          group[bucket] = 0
        }
        return group
      },
      set_group: function(g){
        if(this.group_by == "products.supplier_id"){
          this.supplier = g
        }
        if(this.group_by == "products.category_id"){
          this.category = g
        }
      },
      name_for: function(i){
        var by = this.group_by
        if( by == "products.category_id") return this.hash_find(this.categories, i , "name")
        if( by == "products.supplier_id") return this.hash_find(this.suppliers, i , "supplier_name")
        if( by == "product_id") return "Product"
        return "all"
      },
      loadData: function(){
        this.start = moment(this.start)
        this.end = moment(this.end)
        var that = this
        $.getJSON("/manage/new_report.json" ,
          { start: that.start.unix() , end:   that.end.unix() } ,
          function(ret){ that.items = ret ; })
      },
      plusStartMonth: function(){
        this.start.add(1,"week").endOf("month")
        this.loadData()
      },
      minusStartMonth: function(){
        this.start.subtract(1,"week").startOf("month")
        this.loadData()
      },
      plusEndMonth: function(){
        this.end.add(1,"week").endOf("month")
        this.loadData()
      },
      minusEndMonth: function(){
        this.end.subtract(1,"week").startOf("month")
        this.loadData()
      },
      thisYear: function(){
        this.start.startOf("year")
        this.end.endOf("year")
        this.loadData()
      },
      minusYear: function(){
        this.start.subtract(50,"week").startOf("month")
        this.end.subtract(54,"week").endOf("month")
        this.loadData()
      },
      plusYear: function(){
        this.start.add(54,"week").startOf("month")
        this.end.add(50,"week").endOf("month")
        this.loadData()
      },
    }
  });
