.row.vueapp
  .col-md-6
    %h2= in_place @purchase , :name
  .col-md-2.pill{ "v-bind:class" => "{active_pill: tab == 1}"}
    %h3
      %a{"@click" => "tab = 1"} Basket
  .col-md-2.pill{"v-bind:class" => "{active_pill: tab == 2}"}
    %h3
      %a{"@click" => "tab = 2"} Products
  .col-md-2.pill{"v-bind:class" => "{active_pill: tab == 3}"}
    %h3
      %a{"@click" => "tab = 3"} Orders
  .col-md-12.tab{"v-bind:class" => "{active_tab: tab == 1}"}
    =render "basket"
  .col-md-12.tab{"v-bind:class" => "{active_tab: tab == 2}"}
    =render "products"
  .col-md-12.tab{"v-bind:class" => "{active_tab: tab == 3}"}
    =render "orders"
:javascript
  var app = new Vue({
    el: '.vueapp',
    data: {
      purchase: #{@purchase.to_json(include: :supplier)},
      basket: #{ render( partial: "purchases/basket.json") },
      products: #{ render( partial: "purchases/products.json") },
      orders: #{ render( partial: "purchases/orders.json") },
      tab: 1,
      searchQuery: "",
      columns: {inventory: "#{t(:inventory)}" , stock_level: "#{t(:stock_level).split.first}" ,
          stock_diff: "diff", cost: "#{t(:cost)}" ,ordered: "#{t(:order)}"},
      sortOrders: {inventory: 1, cost: 1 , stock_level: 1 , stock_diff: 1, ordered: 1},
      sortKey: "",
      changed: false
    },
    computed: {
      filteredData: function () {
        if (this.searchQuery) {
          query = this.searchQuery;
          data = this.products.filter(function(prod) {
            return prod.name.toLowerCase().indexOf(query.toLowerCase()) > -1
          })
        } else {
          data = this.products
        }
        var order = this.sortOrders[this.sortKey] || 1
        var sortKey = this.sortKey
        if(sortKey) {
          data = data.slice().sort(function (a, b) {
            a = parseFloat(a[sortKey])
            b = parseFloat(b[sortKey])
            return (a === b ? 0 : a > b ? 1 : -1) * order
          })
        }
        return data
      }
    },
    filters: {
      capitalize: function (str) {
        return str.charAt(0).toUpperCase() + str.slice(1)
      }
    },
    methods: {
      sortBy: function (key) {
        console.log("Sortby " + key);
        this.sortKey = key;
        this.sortOrders[key] = this.sortOrders[key] * -1;
      },
      submit_basket: function(){
        console.log("Submit basket");
      },
      to_basket: function(product){
        var amount = product.ordered + product.stock_level
        if(amount == 0 ) amount = 1
        this.basket.items.push({ name: product.name , picture: product.picture,
                                 quantity: amount, price: product.cost, product_id: product.id});
        this.changed = true;
      },
      in_basket: function(product) {
        for(var i = 0; i < this.basket.items.length; i++) {
          if(this.basket.items[i].product_id == product.id) return true;
        }
        return false;
      },
      total_price: function() {
        var sum = 0;
        for(var i = 0; i < this.basket.items.length; i++) {
          sum = sum + this.basket.items[i].price * this.basket.items[i].quantity
        }
        return sum;
      },
      total_amount: function() {
        var sum = 0;
        for(var i = 0; i < this.basket.items.length; i++) {
          sum = sum + this.basket.items[i].quantity
        }
        return sum;
      }
    }
  })
